version: '3.8'

services:
  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: vhdata-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./dist:/usr/share/nginx/html:ro
      - nginx-cache:/var/cache/nginx
    restart: unless-stopped
    networks:
      - vhdata-network
    depends_on:
      - app

  # Application
  app:
    image: vhdata:latest
    container_name: vhdata-app
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
    environment:
      - NODE_ENV=production
      - PORT=3000
    env_file:
      - .env.production
    restart: unless-stopped
    networks:
      - vhdata-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    container_name: vhdata-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - vhdata-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database (if not using Supabase)
  postgres:
    image: postgres:15-alpine
    container_name: vhdata-postgres
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_MAX_CONNECTIONS=200
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    restart: unless-stopped
    networks:
      - vhdata-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: vhdata-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    restart: unless-stopped
    networks:
      - vhdata-network

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: vhdata-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3001:3000"
    restart: unless-stopped
    networks:
      - vhdata-network
    depends_on:
      - prometheus

  # Log aggregation - Loki
  loki:
    image: grafana/loki:latest
    container_name: vhdata-loki
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki-config.yaml:/etc/loki/local-config.yaml:ro
      - loki-data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    restart: unless-stopped
    networks:
      - vhdata-network

  # Log shipper - Promtail
  promtail:
    image: grafana/promtail:latest
    container_name: vhdata-promtail
    volumes:
      - ./monitoring/promtail-config.yaml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/config.yml
    restart: unless-stopped
    networks:
      - vhdata-network
    depends_on:
      - loki

  # Backup service
  backup:
    image: alpine:latest
    container_name: vhdata-backup
    volumes:
      - postgres-data:/postgres-data:ro
      - redis-data:/redis-data:ro
      - ./backups:/backups
    command: |
      sh -c '
        while true; do
          echo "Starting backup at $(date)"
          tar -czf /backups/backup-$(date +%Y%m%d-%H%M%S).tar.gz /postgres-data /redis-data
          find /backups -type f -mtime +7 -delete
          echo "Backup completed at $(date)"
          sleep 86400
        done
      '
    restart: unless-stopped
    networks:
      - vhdata-network

volumes:
  nginx-cache:
  redis-data:
  postgres-data:
  prometheus-data:
  grafana-data:
  loki-data:

networks:
  vhdata-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16