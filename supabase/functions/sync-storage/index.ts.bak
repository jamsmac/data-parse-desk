import { serve } from "https://deno.land/std@0.190.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2.75.0";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  const supabaseClient = createClient(
    Deno.env.get('SUPABASE_URL') ?? '',
    Deno.env.get('SUPABASE_ANON_KEY') ?? ''
  );

  try {
    const authHeader = req.headers.get('Authorization')!;
    const token = authHeader.replace('Bearer ', '');
    const { data: { user } } = await supabaseClient.auth.getUser(token);

    if (!user) {
      throw new Error('Unauthorized');
    }

    const { provider_id, database_id } = await req.json();

    // Получаем настройки провайдера
    const { data: provider, error: providerError } = await supabaseClient
      .from('storage_providers')
      .select('*')
      .eq('id', provider_id)
      .eq('user_id', user.id)
      .single();

    if (providerError) throw providerError;

    // Получаем данные базы
    const { data: tableData, error: dataError } = await supabaseClient
      .from('table_data')
      .select('*')
      .eq('database_id', database_id);

    if (dataError) throw dataError;

    // Получаем метаданные базы
    const { data: database, error: dbError } = await supabaseClient
      .from('databases')
      .select('name')
      .eq('id', database_id)
      .single();

    if (dbError) throw dbError;

    const exportData = {
      database_name: database.name,
      exported_at: new Date().toISOString(),
      total_rows: tableData?.length || 0,
      data: tableData,
    };

    const jsonData = JSON.stringify(exportData, null, 2);
    const fileName = `${database.name}_${new Date().toISOString().split('T')[0]}.json`;

    // Синхронизация в зависимости от типа провайдера
    let syncResult;
    const config = provider.config as any;

    switch (provider.provider_type) {
      case 'digitalocean':
        syncResult = await syncToDigitalOcean(config, fileName, jsonData);
        break;
      case 'google_drive':
        syncResult = await syncToGoogleDrive(config, fileName, jsonData);
        break;
      case 'supabase':
        syncResult = await syncToSupabase(config, fileName, jsonData);
        break;
      default:
        throw new Error(`Unsupported provider type: ${provider.provider_type}`);
    }

    // Обновляем время последней синхронизации
    await supabaseClient
      .from('storage_providers')
      .update({ last_sync_at: new Date().toISOString() })
      .eq('id', provider_id);

    return new Response(
      JSON.stringify({
        success: true,
        message: 'Data synced successfully',
        details: syncResult,
        rows_synced: tableData?.length || 0,
      }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );
  } catch (error: any) {
    console.error('Sync error:', error);
    return new Response(
      JSON.stringify({ error: error.message }),
      {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );
  }
});

async function syncToDigitalOcean(config: any, fileName: string, data: string) {
  const { endpoint, region, bucket, access_key, secret_key } = config;
  
  // Формируем URL для DigitalOcean Spaces (совместимо с S3 API)
  const url = `https://${bucket}.${region}.digitaloceanspaces.com/${fileName}`;
  
  const response = await fetch(url, {
    method: 'PUT',
    headers: {
      'Content-Type': 'application/json',
      'x-amz-acl': 'private',
      'Authorization': `AWS ${access_key}:${secret_key}`,
    },
    body: data,
  });

  if (!response.ok) {
    throw new Error(`DigitalOcean sync failed: ${response.statusText}`);
  }

  return { url, size: data.length };
}

async function syncToGoogleDrive(config: any, fileName: string, data: string) {
  const { access_token, folder_id } = config;
  
  // Google Drive API v3
  const metadata = {
    name: fileName,
    mimeType: 'application/json',
    parents: folder_id ? [folder_id] : [],
  };

  const form = new FormData();
  form.append('metadata', new Blob([JSON.stringify(metadata)], { type: 'application/json' }));
  form.append('file', new Blob([data], { type: 'application/json' }));

  const response = await fetch('https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${access_token}`,
    },
    body: form,
  });

  if (!response.ok) {
    throw new Error(`Google Drive sync failed: ${response.statusText}`);
  }

  const result = await response.json();
  return { fileId: result.id, size: data.length };
}

async function syncToSupabase(config: any, fileName: string, data: string) {
  const { project_url, service_key, bucket_name } = config;
  
  const supabaseStorage = createClient(project_url, service_key);
  
  const { data: uploadData, error } = await supabaseStorage.storage
    .from(bucket_name)
    .upload(fileName, new Blob([data], { type: 'application/json' }), {
      upsert: true,
    });

  if (error) {
    throw new Error(`Supabase Storage sync failed: ${error.message}`);
  }

  return { path: uploadData.path, size: data.length };
}
