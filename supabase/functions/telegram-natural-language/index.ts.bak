import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.75.0';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { query, user_id, project_id } = await req.json();

    if (!query || !user_id) {
      return new Response(
        JSON.stringify({ error: 'Missing required parameters' }),
        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
    const supabaseKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
    const supabase = createClient(supabaseUrl, supabaseKey);

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞
    let context = '';
    if (project_id) {
      const { data: databases } = await supabase
        .from('databases')
        .select('name, description')
        .eq('project_id', project_id)
        .limit(5);

      if (databases && databases.length > 0) {
        context = `–î–æ—Å—Ç—É–ø–Ω—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${databases.map(d => d.name).join(', ')}.`;
      }
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Lovable AI –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ natural language query
    const LOVABLE_API_KEY = Deno.env.get('LOVABLE_API_KEY');
    if (!LOVABLE_API_KEY) {
      throw new Error('LOVABLE_API_KEY not configured');
    }

    const aiResponse = await fetch('https://ai.gateway.lovable.dev/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${LOVABLE_API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'google/gemini-2.5-flash',
        messages: [
          {
            role: 'system',
            content: `–¢—ã - AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è DATA PARSE DESK, –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏. ${context}

–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø–æ–Ω–∏–º–∞—Ç—å natural language –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–∞—Ö –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—Ç—å –∏—Ö –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è.

–ü–†–ò–ú–ï–†–´ –ó–ê–ü–†–û–°–û–í (–†–£–°–°–ö–ò–ô):

üìä –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö (query_data):
- "–ü–æ–∫–∞–∂–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–∫–∞–∑–æ–≤"
- "–í—ã–≤–µ–¥–∏ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã"
- "–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"
- "–ù–∞–π–¥–∏ –∑–∞–∫–∞–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ'"
- "–ü–æ–∫–∞–∂–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –ü—Ä–æ–¥–∞–∂–∏"

üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (get_stats):
- "–°–∫–æ–ª—å–∫–æ –∑–∞–∫–∞–∑–æ–≤ —Å–µ–≥–æ–¥–Ω—è?"
- "–ü–æ–∫–∞–∂–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"
- "–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ"
- "–°–∫–æ–ª—å–∫–æ —É –º–µ–Ω—è –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö?"

‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π (create_record):
- "–°–æ–∑–¥–∞–π –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞ —Å—É–º–º—É 5000"
- "–î–æ–±–∞–≤—å –∫–ª–∏–µ–Ω—Ç–∞ –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤"
- "–ó–∞–≤–µ–¥–∏ —Ç–æ–≤–∞—Ä Samsung Galaxy"

üìã –°–ø–∏—Å–æ–∫ –±–∞–∑ (list_databases):
- "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö"
- "–ü–æ–∫–∞–∂–∏ –º–æ–∏ –±–∞–∑—ã"
- "–ö–∞–∫–∏–µ —É –º–µ–Ω—è —Ç–∞–±–ª–∏—Ü—ã?"
- "–ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã"

üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ (update_record):
- "–û–±–Ω–æ–≤–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #123 –Ω–∞ '–∑–∞–≤–µ—Ä—à–µ–Ω'"
- "–ò–∑–º–µ–Ω–∏ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –Ω–∞ 1500"
- "–£—Å—Ç–∞–Ω–æ–≤–∏ —Å—Ç–∞—Ç—É—Å '–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'"

üìä –ê–≥—Ä–µ–≥–∞—Ü–∏—è (aggregate_data):
- "–ö–∞–∫–∞—è —Å—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞?"
- "–ü–æ—Å—á–∏—Ç–∞–π –æ–±—â—É—é –≤—ã—Ä—É—á–∫—É"
- "–°–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤?"
- "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞"
- "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —á–µ–∫"

üìà –ì—Ä–∞—Ñ–∏–∫–∏ (create_chart):
- "–ü–æ–∫–∞–∂–∏ –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–¥–∞–∂ –∑–∞ –º–µ—Å—è—Ü"
- "–ü–æ—Å—Ç—Ä–æ–π –¥–∏–∞–≥—Ä–∞–º–º—É –∑–∞–∫–∞–∑–æ–≤"
- "–í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–Ω—è–º"

‚ùì –ü–æ–º–æ—â—å (help):
- "–ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å?"
- "–ü–æ–º–æ—â—å"
- "–ö–∞–∫ —Ç–µ–±—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?"

–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ü–†–ò–ú–ï–†–´ (ENGLISH):
- "Show me last orders" ‚Üí query_data
- "How many sales today?" ‚Üí get_stats
- "Create new customer John Doe" ‚Üí create_record
- "List all databases" ‚Üí list_databases
- "Calculate average price" ‚Üí aggregate_data

–í–ê–ñ–ù–û:
- –û–ø—Ä–µ–¥–µ–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ (action) –Ω–∞ –æ—Å–Ω–æ–≤–µ –ù–ê–ú–ï–†–ï–ù–ò–Ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- –ò–∑–≤–ª–µ–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (database_name, limit, filters, column, operation)
- –î–∞–π –ø–æ–Ω—è—Ç–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ (response) —á—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ
- –ï—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, —É–∫–∞–∂–∏ requires_database: true
- –ë—É–¥—å –≥–∏–±–∫–∏–º –∫ –≤–∞—Ä–∏–∞—Ü–∏—è–º –∑–∞–ø—Ä–æ—Å–∞ (—Å–∏–Ω–æ–Ω–∏–º—ã, –æ–ø–µ—á–∞—Ç–∫–∏)

–û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —á–µ—Ä–µ–∑ tool call process_nl_query.`
          },
          {
            role: 'user',
            content: query
          }
        ],
        tools: [
          {
            type: 'function',
            function: {
              name: 'process_nl_query',
              description: 'Process natural language database query and determine action',
              parameters: {
                type: 'object',
                properties: {
                  action: {
                    type: 'string',
                    enum: [
                      'query_data',
                      'create_record',
                      'update_record',
                      'get_stats',
                      'list_databases',
                      'aggregate_data',
                      'create_chart',
                      'help'
                    ],
                    description: 'The action to perform'
                  },
                  params: {
                    type: 'object',
                    properties: {
                      database_name: { type: 'string', description: 'Database name if mentioned' },
                      limit: { type: 'number', description: 'Number of results to return' },
                      filters: { type: 'object', description: 'Filters to apply' },
                      column: { type: 'string', description: 'Column name for aggregation' },
                      operation: { 
                        type: 'string',
                        enum: ['SUM', 'AVG', 'COUNT', 'MIN', 'MAX'],
                        description: 'Aggregation operation'
                      },
                      chart_type: {
                        type: 'string',
                        enum: ['line', 'bar', 'pie', 'area'],
                        description: 'Chart type'
                      },
                      time_period: { type: 'string', description: 'Time period for data' },
                      record_data: { type: 'object', description: 'Data for new record' },
                      record_id: { type: 'string', description: 'ID of record to update' },
                      updates: { type: 'object', description: 'Fields to update' },
                    },
                    additionalProperties: true
                  },
                  sql_hint: {
                    type: 'string',
                    description: 'SQL-like representation of the query for debugging'
                  },
                  response: {
                    type: 'string',
                    description: 'User-friendly explanation of what will be done'
                  },
                  requires_database: {
                    type: 'boolean',
                    description: 'Whether this action requires selecting a database'
                  }
                },
                required: ['action', 'response']
              }
            }
          }
        ],
        tool_choice: { type: 'function', function: { name: 'process_nl_query' } }
      }),
    });

    if (!aiResponse.ok) {
      const errorText = await aiResponse.text();
      console.error('AI API error:', aiResponse.status, errorText);
      
      if (aiResponse.status === 429) {
        throw new Error('Rate limit exceeded. Please try again in a moment.');
      }
      if (aiResponse.status === 402) {
        throw new Error('Insufficient AI credits. Please top up your credits.');
      }
      
      throw new Error(`AI API error: ${aiResponse.status}`);
    }

    const aiData = await aiResponse.json();
    console.log('AI response:', JSON.stringify(aiData, null, 2));

    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ tool call
    const toolCall = aiData.choices[0]?.message?.tool_calls?.[0];
    if (!toolCall) {
      // Fallback: –ø—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
      const lowerQuery = query.toLowerCase();

      // –°–ø–∏—Å–æ–∫ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
      if (lowerQuery.includes('–±–∞–∑—ã') || lowerQuery.includes('–±–∞–∑–∞') || lowerQuery.includes('—Ç–∞–±–ª–∏—Ü') ||
          lowerQuery.includes('—Å–ø–∏—Å–æ–∫') || lowerQuery.includes('databases') || lowerQuery.includes('tables')) {
        return new Response(
          JSON.stringify({
            action: 'list_databases',
            response: '–ü–æ–∫–∞–∑—ã–≤–∞—é —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö...',
            fallback: true
          }),
          { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
        );
      }

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      if (lowerQuery.includes('—Å—Ç–∞—Ç–∏—Å—Ç') || lowerQuery.includes('—Å–∫–æ–ª—å–∫–æ') ||
          lowerQuery.includes('stats') || lowerQuery.includes('count')) {
        return new Response(
          JSON.stringify({
            action: 'get_stats',
            response: '–°–æ–±–∏—Ä–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...',
            fallback: true
          }),
          { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
        );
      }

      // –ü–æ–º–æ—â—å
      return new Response(
        JSON.stringify({
          action: 'help',
          response: '‚ùì *–ü–æ–º–æ—â—å –ø–æ Natural Language –∑–∞–ø—Ä–æ—Å–∞–º*\n\n' +
                    '–í—ã –º–æ–∂–µ—Ç–µ —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å –º–µ–Ω—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º! –ü—Ä–∏–º–µ—Ä—ã:\n\n' +
                    'üìä "–ü–æ–∫–∞–∂–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–∫–∞–∑–æ–≤"\n' +
                    'üìà "–°–∫–æ–ª—å–∫–æ –∑–∞–∫–∞–∑–æ–≤ —Å–µ–≥–æ–¥–Ω—è?"\n' +
                    '‚ûï "–°–æ–∑–¥–∞–π –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞ 5000‚ÇΩ"\n' +
                    'üìã "–°–ø–∏—Å–æ–∫ –º–æ–∏—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö"\n' +
                    'üî¢ "–ö–∞–∫–∞—è —Å—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞?"\n\n' +
                    '*–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:*\n' +
                    '/projects - —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤\n' +
                    '/checklist - –≤–∞—à–∏ —á–µ–∫–ª–∏—Å—Ç—ã\n' +
                    '/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n' +
                    '/help - –ø–æ–º–æ—â—å',
          fallback: true
        }),
        { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    const result = JSON.parse(toolCall.function.arguments);
    console.log('Parsed result:', result);

    // –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞
    let data = null;
    let message = result.response;

    // Helper function –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
    const formatRecord = (data: any): string => {
      return Object.entries(data)
        .slice(0, 4) // –ü–µ—Ä–≤—ã–µ 4 –ø–æ–ª—è
        .map(([key, value]) => `  ‚Ä¢ ${key}: ${value}`)
        .join('\n');
    };

    if (result.action === 'list_databases' && project_id) {
      const { data: dbList } = await supabase
        .from('databases')
        .select('id, name, description, created_at')
        .eq('project_id', project_id)
        .order('created_at', { ascending: false });
      
      data = dbList;
      
      if (dbList && dbList.length > 0) {
        message = `üìä –ù–∞–π–¥–µ–Ω–æ ${dbList.length} –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö:\n\n` +
          dbList.map((db, i) => `${i + 1}. *${db.name}*${db.description ? `\n   ${db.description}` : ''}`).join('\n\n');
      } else {
        message = 'üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö –≤ —ç—Ç–æ–º –ø—Ä–æ–µ–∫—Ç–µ.';
      }
    } 
    
    else if (result.action === 'get_stats' && project_id) {
      const { data: databases } = await supabase
        .from('databases')
        .select('id')
        .eq('project_id', project_id);

      const databaseIds = databases?.map(d => d.id) || [];
      
      let totalRecords = 0;
      if (databaseIds.length > 0) {
        const { count } = await supabase
          .from('table_data')
          .select('*', { count: 'exact', head: true })
          .in('database_id', databaseIds);
        totalRecords = count || 0;
      }

      const { data: compositeViews } = await supabase
        .from('composite_views')
        .select('id')
        .eq('project_id', project_id);

      data = {
        database_count: databases?.length || 0,
        record_count: totalRecords,
        composite_view_count: compositeViews?.length || 0
      };
      
      message = `üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞*\n\n` +
        `üìä –ë–∞–∑ –¥–∞–Ω–Ω—ã—Ö: *${data.database_count}*\n` +
        `üìù –ó–∞–ø–∏—Å–µ–π: *${data.record_count}*\n` +
        `üîó Composite Views: *${data.composite_view_count}*`;
    }
    
    else if (result.action === 'query_data' && result.params?.database_name) {
      // –ù–∞–π—Ç–∏ database –ø–æ –∏–º–µ–Ω–∏
      const { data: database } = await supabase
        .from('databases')
        .select('id, name')
        .eq('project_id', project_id)
        .ilike('name', `%${result.params.database_name}%`)
        .maybeSingle();

      if (!database) {
        message = `‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö "${result.params.database_name}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞: "–ø–æ–∫–∞–∂–∏ –º–æ–∏ –±–∞–∑—ã"`;
      } else {
        // –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ –ª–∏–º–∏—Ç–∞
        const limit = result.params.limit || 10;
        const { data: tableDataRows, error } = await supabase.rpc('get_table_data', {
          p_database_id: database.id,
          p_limit: limit,
          p_offset: 0,
          p_filters: result.params.filters || null
        });

        if (error) {
          message = `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: ${error.message}`;
          console.error('Query data error:', error);
        } else if (!tableDataRows || tableDataRows.length === 0) {
          message = `üì≠ –ë–∞–∑–∞ "${database.name}" –ø—É—Å—Ç–∞.\n\n–î–æ–±–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.`;
        } else {
          data = tableDataRows;
          message = `üìä *${database.name}*\n\n–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: *${tableDataRows.length}*\n\n`;
          
          // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 5 –∑–∞–ø–∏—Å–µ–π
          tableDataRows.slice(0, 5).forEach((record: any, i: number) => {
            message += `*${i + 1}.*\n${formatRecord(record.data)}\n\n`;
          });
          
          if (tableDataRows.length > 5) {
            message += `_... –∏ –µ—â—ë ${tableDataRows.length - 5} –∑–∞–ø–∏—Å–µ–π_`;
          }
        }
      }
    }
    
    else if (result.action === 'create_record' && result.params?.database_name) {
      const { data: database } = await supabase
        .from('databases')
        .select('id, name')
        .eq('project_id', project_id)
        .ilike('name', `%${result.params.database_name}%`)
        .maybeSingle();

      if (!database || !result.params.record_data) {
        message = `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å.\n\n` +
          `–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:\n` +
          `‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n` +
          `‚Ä¢ –£–∫–∞–∑–∞–Ω—ã –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è`;
      } else {
        const { data: newRecord, error } = await supabase.rpc('insert_table_row', {
          p_database_id: database.id,
          p_data: result.params.record_data
        });

        if (error) {
          message = `‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${error.message}`;
          console.error('Create record error:', error);
        } else {
          data = newRecord;
          message = `‚úÖ *–ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞!*\n\nüìä –ë–∞–∑–∞: ${database.name}\n\n${formatRecord(result.params.record_data)}`;
        }
      }
    }
    
    else if (result.action === 'update_record' && result.params?.record_id) {
      const { data: updated, error } = await supabase.rpc('update_table_row', {
        p_id: result.params.record_id,
        p_data: result.params.updates
      });

      if (error) {
        message = `‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${error.message}`;
        console.error('Update record error:', error);
      } else {
        data = updated;
        const updatedFields = Object.keys(result.params.updates).join(', ');
        message = `‚úÖ *–ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!*\n\nüìù –ò–∑–º–µ–Ω—ë–Ω–Ω—ã–µ –ø–æ–ª—è:\n${updatedFields}`;
      }
    }
    
    else if (result.action === 'aggregate_data' && result.params?.database_name && result.params?.column && result.params?.operation) {
      const { data: database } = await supabase
        .from('databases')
        .select('id, name')
        .eq('project_id', project_id)
        .ilike('name', `%${result.params.database_name}%`)
        .maybeSingle();

      if (!database) {
        message = `‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`;
      } else {
        // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏ –ø–æ—Å—á–∏—Ç–∞—Ç—å –∞–≥—Ä–µ–≥–∞—Ü–∏—é
        const { data: tableDataRows, error } = await supabase.rpc('get_table_data', {
          p_database_id: database.id,
          p_limit: 10000,
          p_offset: 0
        });

        if (error) {
          message = `‚ùå –û—à–∏–±–∫–∞: ${error.message}`;
          console.error('Aggregate error:', error);
        } else if (!tableDataRows || tableDataRows.length === 0) {
          message = `üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏.`;
        } else {
          const column = result.params.column;
          const operation = result.params.operation;
          const values = tableDataRows
            .map((r: any) => r.data[column])
            .filter((v: any) => v !== null && v !== undefined && !isNaN(Number(v)))
            .map(Number);

          if (values.length === 0) {
            message = `‚ùå –ö–æ–ª–æ–Ω–∫–∞ "${column}" –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π.`;
          } else {
            let resultValue;
            switch (operation) {
              case 'SUM':
                resultValue = values.reduce((a: number, b: number) => a + b, 0);
                break;
              case 'AVG':
                resultValue = values.reduce((a: number, b: number) => a + b, 0) / values.length;
                break;
              case 'COUNT':
                resultValue = values.length;
                break;
              case 'MIN':
                resultValue = Math.min(...values);
                break;
              case 'MAX':
                resultValue = Math.max(...values);
                break;
              default:
                resultValue = 0;
            }

            data = { operation, column, value: resultValue };
            message = `üìä *${operation}*(_${column}_)\n\n` +
              `–†–µ–∑—É–ª—å—Ç–∞—Ç: *${resultValue.toFixed(2)}*\n` +
              `–ó–∞–ø–∏—Å–µ–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${values.length}`;
          }
        }
      }
    }
    
    else if (result.action === 'create_chart') {
      message = `üìà *–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞*\n\n` +
        `–¢–∏–ø: ${result.params?.chart_type || 'bar'}\n` +
        `–ü–µ—Ä–∏–æ–¥: ${result.params?.time_period || '—Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü'}\n\n` +
        `üí° –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤ —Ä–∞–∑–¥–µ–ª–µ Analytics.`;
    }
    
    else if (result.action === 'query_data' && result.requires_database) {
      message = `üîç ${result.response}\n\nüí° –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"–ø–æ–∫–∞–∂–∏ –º–æ–∏ –±–∞–∑—ã"`;
    }

    return new Response(
      JSON.stringify({
        action: result.action,
        params: result.params || {},
        sql_hint: result.sql_hint,
        response: message,
        data,
        requires_database: result.requires_database,
      }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );

  } catch (error) {
    console.error('Function error:', error);
    return new Response(
      JSON.stringify({ 
        error: error instanceof Error ? error.message : 'Unknown error',
        action: 'error',
        response: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
      }),
      { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );
  }
});
