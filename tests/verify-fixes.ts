/**
 * –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π memory leaks
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö cleanup —Ñ—É–Ω–∫—Ü–∏–π –≤ –∫–æ–¥–µ
 */

import * as fs from 'fs';
import * as path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

interface CheckResult {
  file: string;
  check: string;
  passed: boolean;
  details: string;
}

const results: CheckResult[] = [];

function checkFileContains(filePath: string, patterns: string[], checkName: string): boolean {
  try {
    const content = fs.readFileSync(filePath, 'utf-8');
    const allFound = patterns.every(pattern => content.includes(pattern));

    results.push({
      file: filePath,
      check: checkName,
      passed: allFound,
      details: allFound ? '‚úÖ –í—Å–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–∞–π–¥–µ–Ω—ã' : `‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: ${patterns.filter(p => !content.includes(p)).join(', ')}`
    });

    return allFound;
  } catch (error) {
    results.push({
      file: filePath,
      check: checkName,
      passed: false,
      details: `‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: ${error}`
    });
    return false;
  }
}

console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π memory leaks...\n');

// 1. FileImportDialog - setInterval cleanup
console.log('1Ô∏è‚É£  –ü—Ä–æ–≤–µ—Ä–∫–∞ FileImportDialog...');
const fileImportPath = path.join(__dirname, '../src/components/import/FileImportDialog.tsx');
checkFileContains(
  fileImportPath,
  [
    'let progressInterval: NodeJS.Timeout | null = null',
    'progressInterval = setInterval',
    'finally {',
    'if (progressInterval) {',
    'clearInterval(progressInterval)',
    'useEffect(() => {',
    'return () => {',
    'setImportProgress(0)',
  ],
  'FileImportDialog setInterval cleanup'
);

// 2. DatabaseView - async useEffect isMounted
console.log('2Ô∏è‚É£  –ü—Ä–æ–≤–µ—Ä–∫–∞ DatabaseView...');
const databaseViewPath = path.join(__dirname, '../src/pages/DatabaseView.tsx');
checkFileContains(
  databaseViewPath,
  [
    'let isMounted = true',
    'if (isMounted) {',
    'return () => {',
    'isMounted = false',
  ],
  'DatabaseView async useEffect isMounted'
);

// 3. FluidButton - setTimeout cleanup
console.log('3Ô∏è‚É£  –ü—Ä–æ–≤–µ—Ä–∫–∞ FluidButton...');
const fluidButtonPath = path.join(__dirname, '../src/components/aurora/core/FluidButton.tsx');
checkFileContains(
  fluidButtonPath,
  [
    'useRef',
    'useEffect',
    'const timeoutsRef = useRef<Set<NodeJS.Timeout>>(new Set())',
    'timeoutsRef.current.forEach(timeout => clearTimeout(timeout))',
    'timeoutsRef.current.clear()',
    'const timeout = setTimeout',
    'timeoutsRef.current.add(timeout)',
    'timeoutsRef.current.delete(timeout)',
  ],
  'FluidButton setTimeout cleanup'
);

// –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò:\n');

let allPassed = true;
results.forEach((result, index) => {
  const status = result.passed ? '‚úÖ PASS' : '‚ùå FAIL';
  console.log(`${index + 1}. ${status}: ${result.check}`);
  console.log(`   –§–∞–π–ª: ${path.basename(result.file)}`);
  console.log(`   ${result.details}\n`);

  if (!result.passed) {
    allPassed = false;
  }
});

// –ò—Ç–æ–≥–æ–≤—ã–π –≤–µ—Ä–¥–∏–∫—Ç
console.log('‚ïê'.repeat(70));
if (allPassed) {
  console.log('‚úÖ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´!');
  console.log('üöÄ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
  console.log('‚úÖ –ì–æ—Ç–æ–≤–æ –∫ –º–∞–Ω—É–∞–ª—å–Ω–æ–º—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é');
  console.log('\n–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:8080/ –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Ç–µ—Å—Ç—ã –∏–∑ QUICK_TEST_GUIDE.md');
  process.exit(0);
} else {
  console.log('‚ùå –ù–ï–ö–û–¢–û–†–´–ï –ü–†–û–í–ï–†–ö–ò –ù–ï –ü–†–û–®–õ–ò!');
  console.log('‚ö†Ô∏è  –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ deployment');
  process.exit(1);
}
