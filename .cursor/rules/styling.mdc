---
description: Tailwind CSS and styling conventions for DataParseDesk
globs: src/**/*.tsx, src/**/*.css, tailwind.config.ts
alwaysApply: true
---

- **Design System Variables:**
  - ALL colors MUST use CSS variables from [index.css](mdc:src/index.css)
  - Colors MUST be in HSL format
  - NEVER hardcode colors in components
  - Support both light and dark themes

  ```typescript
  // ✅ DO: Use design system variables
  <div className="bg-card text-card-foreground border-border">
    Content
  </div>

  <button className="bg-primary text-primary-foreground hover:bg-primary/90">
    Click me
  </button>

  // ❌ DON'T: Hardcode colors
  <div className="bg-white text-black border-gray-300"> {/* Bad! */}
    Content
  </div>

  <button className="bg-purple-600 text-white"> {/* Bad! */}
    Click me
  </button>
  ```

- **Available Color Variables:**
  ```css
  /* From index.css */
  --background, --foreground
  --card, --card-foreground
  --popover, --popover-foreground
  --primary, --primary-foreground
  --secondary, --secondary-foreground
  --muted, --muted-foreground
  --accent, --accent-foreground
  --destructive, --destructive-foreground
  --success, --success-foreground
  --warning, --warning-foreground
  --border, --input, --ring
  --table-header, --table-row-hover
  --sidebar-background, --sidebar-foreground, etc.
  ```

- **Theme Support:**
  ```typescript
  // ✅ DO: All components must work in both light and dark mode
  <div className="bg-background text-foreground">
    {/* Automatically adapts to theme */}
  </div>

  // ✅ DO: Use semantic color names
  <Alert className="bg-destructive text-destructive-foreground">
    Error message
  </Alert>

  <Alert className="bg-success text-success-foreground">
    Success message
  </Alert>

  // ❌ DON'T: Theme-specific classes
  <div className="bg-white dark:bg-black"> {/* Bad: use semantic vars */}
    Content
  </div>
  ```

- **Component Styling with `cn()` Utility:**
  ```typescript
  // ✅ DO: Use cn() for conditional classes
  import { cn } from "@/lib/utils";

  <button
    className={cn(
      "px-4 py-2 rounded-md font-medium transition-colors",
      "focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring",
      variant === "primary" && "bg-primary text-primary-foreground hover:bg-primary/90",
      variant === "destructive" && "bg-destructive text-destructive-foreground hover:bg-destructive/90",
      variant === "outline" && "border border-input bg-background hover:bg-accent",
      size === "sm" && "h-8 px-3 text-sm",
      size === "lg" && "h-12 px-6 text-lg",
      disabled && "opacity-50 cursor-not-allowed",
      className
    )}
  >
    {children}
  </button>

  // ❌ DON'T: String concatenation
  <button className={"btn " + (active ? "active" : "")}>
    {children}
  </button>

  // ❌ DON'T: Template literals for simple cases
  <button className={`btn ${active ? 'active' : ''}`}>
    {/* Use cn() instead */}
  </button>
  ```

- **Responsive Design (Mobile-First):**
  ```typescript
  // ✅ DO: Mobile-first approach
  <div className="
    flex flex-col gap-4           /* Mobile: vertical stack */
    sm:gap-6                      /* 640px+: larger gap */
    md:flex-row md:gap-6          /* 768px+: horizontal layout */
    lg:gap-8                      /* 1024px+: even larger gap */
    xl:max-w-7xl xl:mx-auto       /* 1280px+: max width and center */
  ">
    {children}
  </div>

  // Standard breakpoints:
  // sm: 640px
  // md: 768px
  // lg: 1024px
  // xl: 1280px
  // 2xl: 1536px

  // ✅ DO: Mobile-first grid
  <div className="
    grid grid-cols-1              /* Mobile: 1 column */
    md:grid-cols-2                /* Tablet: 2 columns */
    lg:grid-cols-3                /* Desktop: 3 columns */
    gap-6
  ">
    {items.map(item => <Card key={item.id} {...item} />)}
  </div>

  // ❌ DON'T: Desktop-first
  <div className="grid-cols-3 md:grid-cols-1"> {/* Backwards! */}
    {children}
  </div>
  ```

- **Spacing System:**
  ```typescript
  // ✅ DO: Use Tailwind spacing scale
  // 0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 72, 80, 96

  // ✅ DO: Consistent spacing
  <Card className="p-6"> {/* 24px padding */}
    <CardHeader className="mb-4"> {/* 16px margin-bottom */}
      <h2>Title</h2>
    </CardHeader>
    <CardContent>
      <p className="mb-2">Description</p> {/* 8px margin-bottom */}
    </CardContent>
  </Card>

  // ✅ DO: Use gap for flex/grid layouts
  <div className="flex gap-4">
    <Button>Cancel</Button>
    <Button>Submit</Button>
  </div>

  // ❌ DON'T: Arbitrary values without reason
  <div className="p-[13px] gap-[17px]"> {/* Why these specific values? */}
    {children}
  </div>

  // ✅ ACCEPTABLE: Specific design requirements
  <div className="w-[420px]"> {/* OK if design specifies exact width */}
    {children}
  </div>
  ```

- **Typography:**
  ```typescript
  // ✅ DO: Semantic heading tags with Tailwind classes
  <h1 className="text-4xl font-bold tracking-tight">
    Page Title
  </h1>

  <h2 className="text-3xl font-semibold tracking-tight">
    Section Title
  </h2>

  <h3 className="text-2xl font-semibold">
    Subsection
  </h3>

  <p className="text-base leading-7">
    Body text with comfortable line height
  </p>

  <p className="text-sm text-muted-foreground">
    Helper text or captions
  </p>

  <p className="text-xs text-muted-foreground">
    Fine print
  </p>

  // ✅ DO: Text utilities
  <p className="font-medium">Medium weight</p>
  <p className="font-semibold">Semibold weight</p>
  <p className="font-bold">Bold weight</p>
  <p className="italic">Italic</p>
  <p className="truncate">Text that gets cut off with...</p>
  <p className="line-clamp-2">Text limited to 2 lines</p>
  ```

- **Interactive States:**
  ```typescript
  // ✅ DO: Include all interactive states
  <button className="
    bg-primary text-primary-foreground
    hover:bg-primary/90
    active:bg-primary/80
    focus-visible:outline-none
    focus-visible:ring-2
    focus-visible:ring-ring
    focus-visible:ring-offset-2
    disabled:opacity-50
    disabled:pointer-events-none
    transition-colors
  ">
    Click me
  </button>

  // ✅ DO: Interactive card
  <Card className="
    cursor-pointer
    hover:bg-accent
    hover:shadow-lg
    transition-all
    duration-200
  ">
    Clickable card
  </Card>

  // ✅ DO: Focus states for accessibility
  <input className="
    border border-input
    focus-visible:outline-none
    focus-visible:ring-2
    focus-visible:ring-ring
  " />
  ```

- **Loading & Skeleton States:**
  ```typescript
  // ✅ DO: Use shadcn Skeleton component
  import { Skeleton } from "@/components/ui/skeleton";

  {isLoading ? (
    <div className="space-y-4">
      <Skeleton className="h-4 w-full" />
      <Skeleton className="h-4 w-3/4" />
      <Skeleton className="h-4 w-1/2" />
    </div>
  ) : (
    <Content data={data} />
  )}

  // ✅ DO: Spinner for buttons
  import { Loader2 } from "lucide-react";

  <Button disabled={isLoading}>
    {isLoading && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
    {isLoading ? 'Загрузка...' : 'Отправить'}
  </Button>
  ```

- **Icons with Lucide React:**
  ```typescript
  // ✅ DO: Consistent icon sizing
  import { Database, Plus, Trash2, Edit, ChevronDown } from "lucide-react";

  // Small (16px)
  <Database className="h-4 w-4 text-muted-foreground" />

  // Medium (20px)
  <Plus className="h-5 w-5" />

  // Large (24px)
  <Trash2 className="h-6 w-6 text-destructive" />

  // ✅ DO: Icon in button
  <Button>
    <Plus className="mr-2 h-4 w-4" />
    Создать проект
  </Button>

  // ✅ DO: Icon-only button
  <Button size="icon" variant="ghost">
    <Edit className="h-4 w-4" />
  </Button>

  // ✅ DO: Match icon color to text
  <div className="flex items-center gap-2 text-muted-foreground">
    <Database className="h-4 w-4" />
    <span>Databases</span>
  </div>
  ```

- **Layout Patterns:**
  ```typescript
  // ✅ DO: Standard page layout
  <div className="min-h-screen flex flex-col">
    <Header />
    <main className="flex-1 container mx-auto px-4 py-6">
      {children}
    </main>
    <Footer />
  </div>

  // ✅ DO: Card grid
  <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
    {projects.map(project => (
      <ProjectCard key={project.id} project={project} />
    ))}
  </div>

  // ✅ DO: Split layout (sidebar + content)
  <div className="flex gap-6">
    <aside className="w-64 flex-shrink-0">
      <Sidebar />
    </aside>
    <main className="flex-1 min-w-0"> {/* min-w-0 prevents overflow */}
      <Content />
    </main>
  </div>

  // ✅ DO: Centered container
  <div className="container mx-auto max-w-4xl px-4">
    {children}
  </div>
  ```

- **Forms:**
  ```typescript
  // ✅ DO: Consistent form styling
  <form className="space-y-6">
    <div className="space-y-2">
      <label htmlFor="name" className="text-sm font-medium leading-none">
        Название проекта
      </label>
      <input
        id="name"
        type="text"
        className="
          flex h-10 w-full rounded-md
          border border-input
          bg-background
          px-3 py-2
          text-sm
          ring-offset-background
          placeholder:text-muted-foreground
          focus-visible:outline-none
          focus-visible:ring-2
          focus-visible:ring-ring
          disabled:cursor-not-allowed
          disabled:opacity-50
        "
        placeholder="Введите название"
      />
      {error && (
        <p className="text-sm text-destructive">{error.message}</p>
      )}
    </div>

    <div className="flex justify-end gap-4">
      <Button variant="outline" type="button">
        Отмена
      </Button>
      <Button type="submit">
        Создать
      </Button>
    </div>
  </form>

  // ✅ BETTER: Use shadcn form components
  import { Form, FormField, FormItem, FormLabel, FormControl, FormMessage } from "@/components/ui/form";
  import { Input } from "@/components/ui/input";
  ```

- **Tables:**
  ```typescript
  // ✅ DO: Styled tables
  <div className="relative overflow-x-auto rounded-md border">
    <table className="w-full text-sm text-left">
      <thead className="bg-table-header text-xs uppercase">
        <tr>
          <th className="px-6 py-3">Название</th>
          <th className="px-6 py-3">Статус</th>
          <th className="px-6 py-3">Действия</th>
        </tr>
      </thead>
      <tbody>
        {items.map(item => (
          <tr
            key={item.id}
            className="border-b hover:bg-table-row-hover transition-colors"
          >
            <td className="px-6 py-4">{item.name}</td>
            <td className="px-6 py-4">{item.status}</td>
            <td className="px-6 py-4">
              <div className="flex gap-2">
                <Button size="sm" variant="ghost">Edit</Button>
                <Button size="sm" variant="ghost">Delete</Button>
              </div>
            </td>
          </tr>
        ))}
      </tbody>
    </table>
  </div>

  // ✅ BETTER: Use VirtualTable for large datasets
  import { VirtualTable } from "@/components/common/VirtualTable";
  ```

- **Animations:**
  ```typescript
  // ✅ DO: Use Tailwind transitions
  <div className="
    transform transition-all duration-300
    hover:scale-105
    hover:shadow-lg
  ">
    {children}
  </div>

  // ✅ DO: Fade in
  <div className="animate-in fade-in duration-300">
    {children}
  </div>

  // ✅ DO: Slide in from bottom
  <div className="animate-in slide-in-from-bottom-4 duration-300">
    {children}
  </div>

  // ✅ DO: Custom keyframe animation
  // In tailwind.config.ts:
  // animation: {
  //   'spin-slow': 'spin 3s linear infinite',
  // }

  <Loader className="animate-spin-slow" />
  ```

- **Accessibility Classes:**
  ```typescript
  // ✅ DO: Screen reader only
  <span className="sr-only">Loading...</span>

  // ✅ DO: Focus visible styles
  <a href="/projects" className="
    underline
    focus-visible:outline-none
    focus-visible:ring-2
    focus-visible:ring-ring
    focus-visible:ring-offset-2
  ">
    View projects
  </a>

  // ✅ DO: Skip to content link
  <a
    href="#main-content"
    className="sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4"
  >
    Перейти к содержимому
  </a>
  ```

- **Utility Patterns:**
  ```typescript
  // ✅ DO: Scrollable container
  <div className="max-h-96 overflow-y-auto">
    {longList.map(item => <div key={item.id}>{item.name}</div>)}
  </div>

  // ✅ DO: Aspect ratio
  <div className="aspect-video rounded-lg overflow-hidden">
    <img src={thumbnail} alt="Video thumbnail" className="w-full h-full object-cover" />
  </div>

  // ✅ DO: Centered absolutely
  <div className="absolute inset-0 flex items-center justify-center">
    <Loader />
  </div>

  // ✅ DO: Sticky header
  <header className="sticky top-0 z-50 bg-background border-b">
    Navigation
  </header>
  ```

- **shadcn/ui Integration:**
  ```typescript
  // ✅ DO: Use shadcn components as base
  import { Button } from "@/components/ui/button";
  import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
  import { Dialog, DialogTrigger, DialogContent } from "@/components/ui/dialog";

  // ✅ DO: Extend with custom variants
  <Button variant="default" size="lg" className="custom-extra-class">
    Custom Button
  </Button>

  // ✅ DO: Compose shadcn components
  <Card>
    <CardHeader>
      <CardTitle>Project Details</CardTitle>
    </CardHeader>
    <CardContent>
      <p>Description here</p>
    </CardContent>
  </Card>
  ```

- **CSS Custom Properties:**
  ```typescript
  // ✅ DO: Use CSS variables from index.css
  <div style={{ color: 'hsl(var(--primary))' }}>
    Custom styled element
  </div>

  // ❌ DON'T: Hardcode HSL values
  <div style={{ color: 'hsl(262, 83%, 58%)' }}> {/* Bad: not theme-aware */}
    Element
  </div>

  // ❌ DON'T: Inline styles for layout
  <div style={{ padding: '24px', margin: '16px' }}> {/* Bad: use Tailwind */}
    {children}
  </div>
  ```

- **Dark Mode Testing:**
  ```bash
  # ✅ DO: Test all components in both themes
  # Toggle dark mode in browser:
  # document.documentElement.classList.toggle('dark')

  # All components should:
  # 1. Be readable in both themes
  # 2. Have proper contrast ratios
  # 3. Use semantic color variables
  ```

Follow [react_components.mdc](mdc:.cursor/rules/react_components.mdc) for component patterns.
Follow [project_overview.mdc](mdc:.cursor/rules/project_overview.mdc) for design system overview.
