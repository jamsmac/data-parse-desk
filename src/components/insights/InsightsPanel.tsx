import { useState } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { useAuth } from '@/contexts/AuthContext';
import { useToast } from '@/hooks/use-toast';
import {
  Sheet,
  SheetContent,
  SheetDescription,
  SheetHeader,
  SheetTitle,
} from '@/components/ui/sheet';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { ScrollArea } from '@/components/ui/scroll-area';
import {
  Lightbulb,
  TrendingUp,
  TrendingDown,
  AlertTriangle,
  Info,
  X,
  RefreshCw,
  Loader2,
} from 'lucide-react';

/**
 * Props for the InsightsPanel component
 */
interface InsightsPanelProps {
  /** Whether the panel is open */
  open: boolean;
  /** Callback when panel open state changes */
  onOpenChange: (open: boolean) => void;
  /** Database ID to analyze */
  databaseId: string;
}

/**
 * Represents a data insight generated by AI analysis
 */
interface Insight {
  /** Unique identifier */
  id: string;
  /** Type of insight */
  type: 'trend' | 'anomaly' | 'suggestion' | 'reminder';
  /** Severity level */
  severity: 'low' | 'medium' | 'high';
  /** Short title */
  title: string;
  /** Detailed description */
  description: string;
  /** Recommended action */
  action?: string;
  /** Additional structured data */
  metadata?: any;
  /** Whether the insight has been dismissed */
  is_dismissed: boolean;
  /** Creation timestamp */
  created_at: string;
}

const severityColors = {
  low: 'bg-blue-500',
  medium: 'bg-yellow-500',
  high: 'bg-red-500',
};

const typeIcons = {
  trend: TrendingUp,
  anomaly: AlertTriangle,
  suggestion: Lightbulb,
  reminder: Info,
};

/**
 * Insights Panel - AI-powered data analysis and recommendations
 *
 * Displays AI-generated insights about database data including:
 * - Trend detection (growing/declining metrics)
 * - Anomaly detection (outliers, unusual values)
 * - Suggestions (data quality improvements)
 * - Reminders (stale data, missing updates)
 *
 * @param props - Component props
 *
 * @example
 * ```tsx
 * <InsightsPanel
 *   open={showInsights}
 *   onOpenChange={setShowInsights}
 *   databaseId="database-123"
 * />
 * ```
 */
export const InsightsPanel = ({ open, onOpenChange, databaseId }: InsightsPanelProps) => {
  const { user } = useAuth();
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const [filter, setFilter] = useState<'all' | 'active'>('active');

  // Load insights
  const { data: insights, isLoading } = useQuery({
    queryKey: ['insights', databaseId, filter],
    queryFn: async () => {
      let query = supabase
        .from('data_insights')
        .select('*')
        .eq('database_id', databaseId)
        .order('created_at', { ascending: false });

      if (filter === 'active') {
        query = query.eq('is_dismissed', false);
      }

      const { data, error } = await query;

      if (error) throw error;
      return data as Insight[];
    },
    enabled: open && !!databaseId,
  });

  // Generate new insights
  const generateInsightsMutation = useMutation({
    mutationFn: async () => {
      const { data, error } = await supabase.functions.invoke('generate-insights', {
        body: {
          database_id: databaseId,
          user_id: user?.id,
        },
      });

      if (error) throw error;
      return data;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['insights', databaseId] });
      toast({
        title: '–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω',
        description: '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã',
      });
    },
    onError: (error: any) => {
      toast({
        title: '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞',
        description: error.message,
        variant: 'destructive',
      });
    },
  });

  // Dismiss insight
  const dismissInsightMutation = useMutation({
    mutationFn: async (insightId: string) => {
      const { error } = await supabase
        .from('data_insights')
        .update({
          is_dismissed: true,
          dismissed_at: new Date().toISOString(),
        })
        .eq('id', insightId);

      if (error) throw error;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['insights', databaseId] });
      toast({
        description: '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —Å–∫—Ä—ã—Ç–∞',
      });
    },
  });

  const activeInsights = insights?.filter(i => !i.is_dismissed) || [];
  const dismissedInsights = insights?.filter(i => i.is_dismissed) || [];

  return (
    <Sheet open={open} onOpenChange={onOpenChange}>
      <SheetContent side="right" className="w-[500px] sm:w-[600px] flex flex-col p-0">
        <SheetHeader className="p-6 pb-4 border-b">
          <SheetTitle className="flex items-center gap-2">
            <Lightbulb className="h-5 w-5 text-primary" />
            –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ Insights
          </SheetTitle>
          <SheetDescription>
            AI-–∞–Ω–∞–ª–∏–∑ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
          </SheetDescription>
        </SheetHeader>

        {/* Controls */}
        <div className="p-6 pb-4 border-b space-y-4">
          <div className="flex items-center justify-between">
            <div className="flex gap-2">
              <Button
                variant={filter === 'active' ? 'default' : 'outline'}
                size="sm"
                onClick={() => setFilter('active')}
              >
                –ê–∫—Ç–∏–≤–Ω—ã–µ ({activeInsights.length})
              </Button>
              <Button
                variant={filter === 'all' ? 'default' : 'outline'}
                size="sm"
                onClick={() => setFilter('all')}
              >
                –í—Å–µ ({insights?.length || 0})
              </Button>
            </div>

            <Button
              size="sm"
              onClick={() => generateInsightsMutation.mutate()}
              disabled={generateInsightsMutation.isPending}
            >
              {generateInsightsMutation.isPending ? (
                <>
                  <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                  –ê–Ω–∞–ª–∏–∑...
                </>
              ) : (
                <>
                  <RefreshCw className="h-4 w-4 mr-2" />
                  –û–±–Ω–æ–≤–∏—Ç—å
                </>
              )}
            </Button>
          </div>
        </div>

        {/* Insights List */}
        <ScrollArea className="flex-1 p-6">
          {isLoading ? (
            <div className="flex items-center justify-center py-12">
              <Loader2 className="h-8 w-8 animate-spin text-muted-foreground" />
            </div>
          ) : insights && insights.length > 0 ? (
            <div className="space-y-4">
              {insights.map((insight) => {
                const Icon = typeIcons[insight.type];

                return (
                  <Card key={insight.id} className={insight.is_dismissed ? 'opacity-50' : ''}>
                    <CardHeader className="pb-3">
                      <div className="flex items-start justify-between gap-2">
                        <div className="flex items-start gap-3 flex-1">
                          <div className={`p-2 rounded-lg ${severityColors[insight.severity]} bg-opacity-10`}>
                            <Icon className={`h-4 w-4 ${severityColors[insight.severity].replace('bg-', 'text-')}`} />
                          </div>
                          <div className="flex-1">
                            <div className="flex items-center gap-2 mb-1">
                              <CardTitle className="text-sm font-medium">
                                {insight.title}
                              </CardTitle>
                              <Badge
                                variant="outline"
                                className={`text-xs ${severityColors[insight.severity].replace('bg-', 'border-')}`}
                              >
                                {insight.severity === 'low' && '–ù–∏–∑–∫–∏–π'}
                                {insight.severity === 'medium' && '–°—Ä–µ–¥–Ω–∏–π'}
                                {insight.severity === 'high' && '–í—ã—Å–æ–∫–∏–π'}
                              </Badge>
                            </div>
                            <p className="text-sm text-muted-foreground">
                              {insight.description}
                            </p>
                            {insight.action && (
                              <p className="text-xs text-primary mt-2">
                                üí° {insight.action}
                              </p>
                            )}
                            {insight.metadata && (
                              <details className="mt-2 text-xs text-muted-foreground">
                                <summary className="cursor-pointer hover:text-foreground">
                                  –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                                </summary>
                                <pre className="mt-2 p-2 bg-muted rounded text-xs overflow-x-auto">
                                  {JSON.stringify(insight.metadata, null, 2)}
                                </pre>
                              </details>
                            )}
                          </div>
                        </div>
                        {!insight.is_dismissed && (
                          <Button
                            variant="ghost"
                            size="icon"
                            className="h-8 w-8 shrink-0"
                            onClick={() => dismissInsightMutation.mutate(insight.id)}
                          >
                            <X className="h-4 w-4" />
                          </Button>
                        )}
                      </div>
                    </CardHeader>
                    <CardContent className="pt-0">
                      <p className="text-xs text-muted-foreground">
                        {new Date(insight.created_at).toLocaleString('ru-RU', {
                          dateStyle: 'medium',
                          timeStyle: 'short',
                        })}
                      </p>
                    </CardContent>
                  </Card>
                );
              })}
            </div>
          ) : (
            <div className="text-center py-12 text-muted-foreground">
              <Lightbulb className="h-12 w-12 mx-auto mb-4 opacity-50" />
              <p className="text-sm">–ù–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π</p>
              <p className="text-xs mt-2">
                –ù–∞–∂–º–∏—Ç–µ "–û–±–Ω–æ–≤–∏—Ç—å" –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö
              </p>
            </div>
          )}
        </ScrollArea>
      </SheetContent>
    </Sheet>
  );
};
