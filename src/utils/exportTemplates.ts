/**
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∏ –∑–∞–≥—Ä—É–∂–∞—Ç—å —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
 */

import { ImageFormat, QualityLevel, WatermarkOptions } from './chartExportAdvanced';

export interface ExportTemplate {
  id: string;
  name: string;
  description?: string;
  format: ImageFormat;
  quality: QualityLevel | number;
  scale?: number;
  watermark?: WatermarkOptions;
  customSize?: {
    width: number;
    height: number;
  };
  createdAt: Date;
  updatedAt: Date;
  isDefault?: boolean;
  icon?: string;
  tags?: string[];
}

const STORAGE_KEY = 'vhdata_export_templates';

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
 */
export function getExportTemplates(): ExportTemplate[] {
  try {
    const stored = localStorage.getItem(STORAGE_KEY);
    if (!stored) return getDefaultTemplates();

    const templates = JSON.parse(stored) as ExportTemplate[];
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ–±—ä–µ–∫—Ç—ã Date
    return templates.map(t => ({
      ...t,
      createdAt: new Date(t.createdAt),
      updatedAt: new Date(t.updatedAt)
    }));
  } catch (error) {
    console.error('Error loading export templates:', error);
    return getDefaultTemplates();
  }
}

/**
 * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
 */
export function saveExportTemplate(template: Omit<ExportTemplate, 'id' | 'createdAt' | 'updatedAt'>): ExportTemplate {
  const templates = getExportTemplates();

  const newTemplate: ExportTemplate = {
    ...template,
    id: crypto.randomUUID(),
    createdAt: new Date(),
    updatedAt: new Date()
  };

  templates.push(newTemplate);
  saveTemplates(templates);

  return newTemplate;
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —à–∞–±–ª–æ–Ω–∞
 */
export function updateExportTemplate(id: string, updates: Partial<ExportTemplate>): void {
  const templates = getExportTemplates();
  const index = templates.findIndex(t => t.id === id);

  if (index === -1) {
    throw new Error(`Template with id ${id} not found`);
  }

  templates[index] = {
    ...templates[index],
    ...updates,
    id: templates[index].id, // –ù–µ–ª—å–∑—è –º–µ–Ω—è—Ç—å ID
    createdAt: templates[index].createdAt, // –ù–µ–ª—å–∑—è –º–µ–Ω—è—Ç—å –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è
    updatedAt: new Date()
  };

  saveTemplates(templates);
}

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
 */
export function deleteExportTemplate(id: string): void {
  const templates = getExportTemplates();
  const filtered = templates.filter(t => t.id !== id);

  if (filtered.length === templates.length) {
    throw new Error(`Template with id ${id} not found`);
  }

  saveTemplates(filtered);
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –ø–æ ID
 */
export function getExportTemplateById(id: string): ExportTemplate | null {
  const templates = getExportTemplates();
  return templates.find(t => t.id === id) || null;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ –ø–æ —Ç–µ–≥–∞–º
 */
export function getExportTemplatesByTags(tags: string[]): ExportTemplate[] {
  const templates = getExportTemplates();
  return templates.filter(t =>
    t.tags && tags.some(tag => t.tags!.includes(tag))
  );
}

/**
 * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ —à–∞–±–ª–æ–Ω–æ–≤ –≤ localStorage
 */
function saveTemplates(templates: ExportTemplate[]): void {
  try {
    localStorage.setItem(STORAGE_KEY, JSON.stringify(templates));
  } catch (error) {
    console.error('Error saving export templates:', error);
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
 */
function getDefaultTemplates(): ExportTemplate[] {
  const now = new Date();

  return [
    {
      id: 'high-quality-png',
      name: '–í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ PNG',
      description: '–î–ª—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π –∏ –ø–µ—á–∞—Ç–∏',
      format: 'png',
      quality: 'high',
      scale: 3,
      createdAt: now,
      updatedAt: now,
      isDefault: true,
      icon: 'üñºÔ∏è',
      tags: ['–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è', '–ø–µ—á–∞—Ç—å', '–≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ']
    },
    {
      id: 'web-optimized',
      name: '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –≤–µ–±–∞',
      description: '–ú–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –≤–µ–±-—Å–∞–π—Ç–æ–≤',
      format: 'webp',
      quality: 0.8,
      scale: 1.5,
      createdAt: now,
      updatedAt: now,
      isDefault: true,
      icon: 'üåê',
      tags: ['–≤–µ–±', '–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è', '–±—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞']
    },
    {
      id: 'social-media',
      name: '–î–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π',
      description: '–° –≤–æ–¥—è–Ω—ã–º –∑–Ω–∞–∫–æ–º –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π',
      format: 'jpeg',
      quality: 0.9,
      scale: 2,
      watermark: {
        text: 'VHData Platform',
        position: 'bottom-right',
        opacity: 0.5,
        fontSize: 14
      },
      customSize: {
        width: 1200,
        height: 630
      },
      createdAt: now,
      updatedAt: now,
      isDefault: true,
      icon: 'üì±',
      tags: ['—Å–æ—Ü—Å–µ—Ç–∏', 'instagram', 'facebook', 'twitter']
    },
    {
      id: 'vector-svg',
      name: '–í–µ–∫—Ç–æ—Ä–Ω—ã–π SVG',
      description: '–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–∞—è –≤–µ–∫—Ç–æ—Ä–Ω–∞—è –≥—Ä–∞—Ñ–∏–∫–∞',
      format: 'svg',
      quality: 'high',
      createdAt: now,
      updatedAt: now,
      isDefault: true,
      icon: 'üìê',
      tags: ['–≤–µ–∫—Ç–æ—Ä', '–º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º—ã–π', '—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–π']
    },
    {
      id: 'report-export',
      name: '–î–ª—è –æ—Ç—á–µ—Ç–æ–≤',
      description: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤',
      format: 'png',
      quality: 'medium',
      scale: 2,
      watermark: {
        text: '–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ',
        position: 'top-right',
        opacity: 0.3,
        fontSize: 12,
        fontColor: '#ff0000'
      },
      createdAt: now,
      updatedAt: now,
      isDefault: true,
      icon: 'üìä',
      tags: ['–æ—Ç—á–µ—Ç', '–¥–æ–∫—É–º–µ–Ω—Ç', '–∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ']
    }
  ];
}

/**
 * –°–±—Ä–æ—Å –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —à–∞–±–ª–æ–Ω–∞–º
 */
export function resetToDefaultTemplates(): void {
  saveTemplates(getDefaultTemplates());
}

/**
 * –ò–º–ø–æ—Ä—Ç —à–∞–±–ª–æ–Ω–æ–≤ –∏–∑ JSON
 */
export function importTemplates(json: string): void {
  try {
    const imported = JSON.parse(json) as ExportTemplate[];
    const existing = getExportTemplates().filter(t => !t.isDefault);

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º
    const merged = [...getDefaultTemplates(), ...existing, ...imported.map(t => ({
      ...t,
      id: crypto.randomUUID(), // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ ID –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
      createdAt: new Date(t.createdAt),
      updatedAt: new Date(),
      isDefault: false
    }))];

    saveTemplates(merged);
  } catch (error) {
    console.error('Error importing templates:', error);
    throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON —Ñ–∞–π–ª–∞');
  }
}

/**
 * –≠–∫—Å–ø–æ—Ä—Ç —à–∞–±–ª–æ–Ω–æ–≤ –≤ JSON
 */
export function exportTemplates(includeDefaults = false): string {
  const templates = getExportTemplates();
  const toExport = includeDefaults ? templates : templates.filter(t => !t.isDefault);
  return JSON.stringify(toExport, null, 2);
}

/**
 * –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
 */
export function cloneTemplate(id: string, newName: string): ExportTemplate {
  const template = getExportTemplateById(id);
  if (!template) {
    throw new Error(`Template with id ${id} not found`);
  }

  return saveExportTemplate({
    ...template,
    name: newName,
    description: `–ö–æ–ø–∏—è: ${template.description || template.name}`,
    isDefault: false
  });
}

/**
 * –ü–æ–∏—Å–∫ —à–∞–±–ª–æ–Ω–æ–≤ –ø–æ –∏–º–µ–Ω–∏
 */
export function searchTemplates(query: string): ExportTemplate[] {
  const templates = getExportTemplates();
  const lowerQuery = query.toLowerCase();

  return templates.filter(t =>
    t.name.toLowerCase().includes(lowerQuery) ||
    t.description?.toLowerCase().includes(lowerQuery) ||
    t.tags?.some(tag => tag.toLowerCase().includes(lowerQuery))
  );
}